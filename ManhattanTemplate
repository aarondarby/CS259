//in progress creating template for the project (movie dataset reading, masking, KNN for K=1)
import java.io.*;

public class GenreOnlyModel {

    // Use we use 'static' for all methods to keep things simple, so we can call those methods main

    static void Assert(boolean res) // We use this to test our results - don't delete or modify!
    {
        if (!res) {
            System.out.print("Something went wrong.");
            System.exit(0);
        }
    }


    static double[] mult(double a, double[] V) { // multiplying scalar and vector
        double[] d = new double[V.length];
        for (int i = 0; i < V.length; i++) {
            d[i] = a * V[i];
        }
        return d;
    }

    static double[] add(double a, double[] V) { // adding scalar and vector
        double[] d = new double[V.length];
        for (int i = 0; i < V.length; i++) {
            d[i] = V[i] + a;
        }
        return d;
    }

    static double[] sub(double a, double[] V) {  // subtracting a scalar from vector
        double[] d = new double[V.length];
        for (int i = 0; i < V.length; i++) {
            d[i] = V[i] - a;
        }
        return d;
    }

    static double[] add(double[] U, double[] V) { // adding two vectors
        double[] d = new double[U.length];
        for (int i = 0; i < U.length; i++) {
            d[i] = U[i] + V[i];
        }
        return d;
    }

    static double[] sub(double[] U, double[] V) { // subtracting vector from vector
        double[] d = new double[U.length];
        for (int i = 0; i < U.length; i++) {
            d[i] = U[i] + V[i];
        }
        return d;
    }

    static double dot(double[] U, double[] V) { // dot product of two vectors
        double sum = 0.0;
        for (int i = 0; i < U.length; i++) {
            sum += U[i] * V[i];
        }
        return sum;
    }

    static int NumberOfFeatures = 4;

    static double[] toFeatureVector(double id, String genre, double runtime, double year, double imdb, double rt, double budget, double boxOffice) {

        double[] feature = new double[NumberOfFeatures];

        // remove the id as a feature

//        switch (genre) { // We also use represent each movie genre as an integer number:
//
//            case "Action":  feature[0] = 1; break;
//            case "Fantasy":   feature[1] = 1; break;
//            case "Romance": feature[2] = 1; break;
//            case "Sci-Fi": feature[3] = 1; break;
//            case "Adventure": feature[4] = 1; break;
//            case "Horror": feature[5] = 1; break;
//            case "Comedy": feature[6] = 1; break;
//            case "Thriller": feature[7] = 1; break;
//            default: Assert(false);
//        }
        feature[0] = runtime;
        feature[1] = imdb;
        feature[2] = rt;
        feature[3] = budget;

        return feature;
    }

    // We are using the dot product to determine similarity:
    static double similarity(double[] u, double[] v) {
        return dot(u, v);
    }

    /*
        Using this as the distance formula should give a better result than what's in his slide.
     */
    static double manhattan_distance(double[] u, double[] v) {
         double sum = 0.0;
         for (int i = 0; i < u.length; i++) {
             sum += Math.abs(u[i] - v[i]);
         }
         return sum;
    }

    /*
        This deals with the arrays automatically.
        The neighbour furthest away from the current test feature is stored at k-1.
        So we check if it's smaller than that value and if it is we replapce k-1 with the current distance.
     */
    static void array_utility(int[] best_matches_index, double[] best_matches_num, double current_distance, int index, int k) {
        if (current_distance < best_matches_num[k - 1]) {
            best_matches_num[k - 1] = current_distance;
            best_matches_index[k - 1] = index;
            array_sorter(best_matches_index, best_matches_num);
        }
    }

    /*
        Sorts both the num array and index array.
        The num array is sorted ascending, and the index is sorted to match it's corresponding number
     */
    static void array_sorter(int[] best_matches_index, double[] best_matches_num) {
        int n = best_matches_num.length;
        for (int i = 0; i < n - 1; i++) {

            int min_idx = i;

            for (int j = i + 1; j < n; j++) {
                if (best_matches_num[j] < best_matches_num[min_idx]) {
                    min_idx = j;
                }
            }

            double temp = best_matches_num[i];
            best_matches_num[i] = best_matches_num[min_idx];
            best_matches_num[min_idx] = temp;

            int temp2 = best_matches_index[i];
            best_matches_index[i] = best_matches_index[min_idx];
            best_matches_index[min_idx] = temp2;
        }
    }

    /*
        Added to take up to k-neighbours
     */
    static int knnClassify(double[][] trainingData, int[] trainingLabels, double[] testFeature, int k) {

        // stores the k best matches and their corresponding index
        double best_matches_num[] = new double[k];
        int best_matches_index[] = new int[k];

        // populates the array with the first k distances
        for (int i =0; i< k; i++) {
            best_matches_num[i] = manhattan_distance(testFeature, trainingData[i]);
            best_matches_index[i] = i;
        }

        // sorts what we've added, so the largest value is at position [k]
        array_sorter(best_matches_index, best_matches_num);

        // goes through the rest of the training data
        for (int i = k; i < trainingData.length; i++) {
            // gets the current distance
            double current_distance = manhattan_distance(testFeature, trainingData[i]);
            // let's array_utility decide if it's worth keeping
            array_utility(best_matches_index,best_matches_num,current_distance,i,k);
        }



        int num_pos = 0;
        int num_neg = 0;
        // goes through the k neighbours and checks their labels
        // if there are more positive labels than negative we return 1, else 0
        for (int i = 0; i < best_matches_index.length; i++) {
            int temp = trainingLabels[ best_matches_index[i] ];
        //    System.out.println(best_matches_index[i] + " : " + best_matches_num[i]);
            if (temp ==1) {
                num_pos++;
            } else {
                num_neg++;
            }
        }

        // i just use this for testing stuff
//        System.out.println("pos : " + num_pos + "\t neg : " + num_neg);

        if (num_pos > num_neg) {
            return 1;
        } else {
            return 0;
        }
    }


    static void loadData(String filePath, double[][] dataFeatures, int[] dataLabels) throws IOException {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            int idx = 0;
            br.readLine(); // skip header line
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                // Assuming csv format: MovieID,Title,Genre,Runtime,Year,Lead Actor,Director,IMDB,RT(%),Budget,Box Office Revenue (in million $),Like it
                double id = Double.parseDouble(values[0]);
                String genre = values[2];
                double runtime = Double.parseDouble(values[10]);
                double year = Double.parseDouble(values[3]);
                double imdb = Double.parseDouble(values[7]);
                double rt = Double.parseDouble(values[6]);
                double budget = Double.parseDouble(values[9]);
                double boxOffice = Double.parseDouble(values[8]);

                dataFeatures[idx] = toFeatureVector(id, genre, runtime, year, imdb, rt, budget, boxOffice);
                dataLabels[idx] = Integer.parseInt(values[11]); // Assuming the label is the last column and is numeric
                idx++;
            }
        }
    }

    public static void main(String[] args) {

        double[][] trainingData = new double[100][];
        int[] trainingLabels = new int[100];
        double[][] testingData = new double[100][];
        int[] testingLabels = new int[100];
        try {
            // You may need to change the path:
            loadData("training-set.csv", trainingData, trainingLabels);
            loadData("testing-set.csv", testingData, testingLabels);
        }
        catch (IOException e) {
            System.out.println("Error reading data files: " + e.getMessage());
            return;
        }

        // Compute accuracy on the testing set
        int correctPredictions = 0;

        // put k value here
        int k = 3;

        for (int i =0; i<testingData.length; i++) {
   //         System.out.println(trainingLabels[i] +  " + " +  knnClassify(trainingData,trainingLabels,testingData[i],1));
            if (testingLabels[i] == knnClassify(trainingData,trainingLabels,testingData[i],k)) {
                correctPredictions++;
            }
        }


        double accuracy = (double) correctPredictions / testingData.length * 100;

        System.out.printf("A: %.2f%%\n", accuracy);

    }

}
